#!./lua

local ui = require("ui")

local shell = require("user.shell")
local debugger = require("user.debugger")

ui.init()
shell.init(ui)
debugger.init(ui)

local columns = ui.in_root(ui.hbox({ name = "columns", spacing = 4, scroll_by = 20 }))
local add_column

local function prompt_eval(self, text)
   local context = self.parent.parent.data.context
   if context == "$" then
      return shell.eval(self, text)
   elseif text:match("^debug") then
      return debugger.new(self)
   else
      local id = self.parent.parent.parent.name .. #self.parent.parent.parent.children
      self.parent.children.context:set(id .. " ")
      self:resize()
      local column = self.parent.parent.parent
      column.data.add_prompt(column, "?", " ? ")
   end
end

local function prompt_on_key(self, key, is_text, is_repeat)
   local context = self.parent.parent.data.context
   if context == "?" then
      if key == "$" then
         shell.enable(self)
         return true
      end
   end
   if key == "Ctrl Backspace" and self.text == "" and not is_repeat then
      self.parent.parent.data.context = "?"
      self.parent.children.context:set(" ? ")
      return true
   end
   if context == "$" then
      return shell.on_key(self, key)
   end
end

local function add_prompt(column, context, text, dir, data)
   local window = ui.vbox({
      name = "window",
      scrollable = false,
      min_w = 350,
      spacing = 4,
      fill = 0x77333333,
      border = 0x00cccc,
      focus_border = 0x77ffff,
      data = {
         context = context,
      },
      on_key = function(self, key, is_text, is_repeat)
         if is_text then
            local prompt = self.children[1].children.prompt
            prompt:on_key(key, is_text, is_repeat)
            ui.set_focus(prompt)
            return true
         elseif key == "Return" then
            ui.set_focus(self.children[1].children.prompt)
            return true
         end
      end,
      on_click = function(self)
         ui.set_focus(self.children[1].children.prompt)
         return true
      end,
   }, {
      ui.hbox({ scrollable = false }, {
         ui.text(text, {
            name = "context",
            color = 0x00ffff,
            editable = false,
         }),
         ui.text("", {
            name = "prompt",
            editable = true,
            eval = prompt_eval,
            on_key = prompt_on_key,
            data = data or {},
         }),
      })
   })
   ui.set_focus(window)
   if dir == "right" then
      column = add_column()
   end
   column:add_child(window)
end

add_column = function()
   return columns:add_child(ui.vbox({
      name = string.char(64 + #columns.children + 1),
      scrollable = false,
      spacing = 4,
      data = {
         add_prompt = add_prompt,
      }
   }))
end

local column = add_column()
column.data.add_prompt(column, "?", " ? ")

local fullscreen = false

ui.on_key(function(focus, key, is_text, is_repeat)
   --print(key)
   if key == "Escape" then
      ui.quit()
   elseif key == "Ctrl F" and not is_repeat then
      fullscreen = not fullscreen
      ui.fullscreen(fullscreen)
   elseif key == "Up" then
      local prev = ui.previous_sibling(focus)
      if prev then
         ui.set_focus(prev)
      end
   elseif key == "Down" then
      local next = ui.next_sibling(focus)
      if next then
         ui.set_focus(next)
      end
   end
end)

ui.run(function()
   shell.frame()
end)
