#!./lua

local ui = require("ui")

local shell = require("user.shell")
local debugger = require("user.debugger")

ui.init()
shell.init(ui)
debugger.init(ui)

local columns = ui.in_root(ui.hbox({ name = "columns", spacing = 4, scroll_by = 20 }))
local add_column

local function down(self)
   local cell = ui.above(self, "cell")
   if not cell then
      return
   end
   local column = ui.above(cell, "column")
   local next = ui.next_sibling(cell)
   if not next then
      local prompt = ui.below(cell, "prompt")
      if prompt.text == "" then
         return
      end
      next = column.data.add_cell(column, "?", " ? ")
   end
   ui.set_focus(next)
end

local function right(self)
   local cell = ui.above(self, "cell")
   if not cell then
      return
   end
   local column = ui.above(cell, "column")
   local nextcol = ui.next_sibling(column)
   if nextcol then
      ui.set_focus(nextcol.children[1]) -- FIXME cell visually to the right
   else
      local prompt = ui.below(cell, "prompt")
      if prompt.text == "" then
         return
      end
      nextcol = add_column()
      ui.set_focus(nextcol.data.add_cell(nextcol, "?", " ? "))
   end
end

local function prompt_eval(self, text, key)
   local cell = ui.above(self, "cell")
   local mode = cell.data.mode
   if mode == "$" then
      return shell.eval(self, text)
   elseif text:match("^debug") then
      return debugger.new(self)
   else
      local context = ui.below(cell, "context")
      if context.text == " ? " then
         local column = ui.above(self, "column")
         local id = column.data.name .. #column.children
         context:set(id .. " ")
         self:resize()
      end
      if key == "Return" then
         down(cell)
      elseif key == "Shift Return" then
         right(cell)
      end
   end
end

local function prompt_on_key(self, key, is_text, is_repeat)
   local cell = ui.above(self, "cell")
   local mode = cell.data.mode
   if mode == "?" then
      if key == "$" then
         shell.enable(self)
         return true
      end
   end
   if key == "Ctrl Backspace" and self.text == "" and not is_repeat then
      cell.data.mode = "?"
      ui.below(cell, "context"):set(" ? ")
      return true
   end
   if mode == "$" then
      return shell.on_key(self, key)
   end
end

local function add_cell(column, mode, text, dir, data)
   local cell = ui.vbox({
      name = "cell",
      scrollable = false,
      min_w = 350,
      spacing = 4,
      fill = 0x77333333,
      border = 0x00cccc,
      focus_border = 0x77ffff,
      data = {
         mode = mode,
      },
      on_key = function(self, key, is_text, is_repeat)
         local prompt = ui.below(self, "prompt")
         if is_text or key == "Backspace" then
            prompt:on_key(key, is_text, is_repeat)
            ui.set_focus(prompt)
            return true
         elseif key == "Return" then
            ui.set_focus(prompt)
            return true
         end
      end,
      on_click = function(self)
         ui.set_focus(ui.below(self, "prompt"))
         return true
      end,
   }, {
      ui.hbox({ scrollable = false }, {
         ui.text(text, {
            name = "context",
            color = 0x00ffff,
            editable = false,
         }),
         ui.text("", {
            name = "prompt",
            editable = true,
            eval = prompt_eval,
            on_key = prompt_on_key,
            data = data or {},
         }),
      })
   })
   ui.set_focus(cell)
   if dir == "right" then
      column = add_column()
   end
   column:add_child(cell)
   return cell
end

add_column = function()
   return columns:add_child(ui.vbox({
      name = "column",
      scrollable = false,
      spacing = 4,
      data = {
         name = string.char(64 + #columns.children + 1),
         add_cell = add_cell,
      }
   }))
end

local firstcol = add_column()
firstcol.data.add_cell(firstcol, "?", " ? ")

local fullscreen = false

ui.on_key(function(focus, key, is_text, is_repeat)
   --print(key)
   if key == "Escape" then
      if focus.name == "cell" then
         ui.quit()
      else
         ui.set_focus(ui.above(focus, "cell"))
      end
   elseif key == "Ctrl F" and not is_repeat then
      fullscreen = not fullscreen
      ui.fullscreen(fullscreen)
   elseif key == "Up" then
      local cell = ui.above(focus, "cell")
      local column = ui.above(cell, "column")
      local prev, i = ui.previous_sibling(cell)
      if prev then
         ui.set_focus(prev)
         if i == #column.children and ui.below(cell, "prompt").text == "" then
            column:remove_n_children_below(1, i - 1)
         end
      end
   elseif key == "Down" then
      down(focus)
   elseif key == "Left" then
      local cell = ui.above(focus, "cell")
      local column = ui.above(cell, "column")
      local prevcol, i = ui.previous_sibling(column)
      if prevcol then
         ui.set_focus(prevcol.children[1]) -- FIXME cell visually to the left
         if #column.children == 1 and ui.below(column.children[1], "prompt").text == "" then
            columns:remove_n_children_below(1, i - 1)
         end
      end
   elseif key == "Right" then
      right(focus)
   end
end)

ui.run(function()
   shell.frame()
end)
